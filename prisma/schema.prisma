// generator client {
//   provider = "prisma-client-js"
// }

// datasource db {
//   provider = "mysql"
//   url      = env("DATABASE_URL")
// }
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"  // or "mysql" / "mongodb"
  url      = env("DATABASE_URL")
}

model Admin {
  id        Int      @id @default(autoincrement())
  name      String
  email     String   @unique
  password  String
  role      String   @default("moderator")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Blog {
  id          Int       @id @default(autoincrement())
  title       String?
  content     String?
  publishDate DateTime?
}

model Comment {
  id        Int      @id @default(autoincrement())
  content   String
  createdAt DateTime @default(now())
  userId    Int
  videoId   Int
  isDeleted Boolean  @default(false)

  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  video Video @relation(fields: [videoId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([videoId])
}

model Course {
  id          Int      @id @default(autoincrement())
  title       String?
  description String?
  price       Decimal?
  discount    Decimal?
}

model Follow {
  id          Int      @id @default(autoincrement())
  followerId  Int
  followingId Int
  createdAt   DateTime @default(now())

  follower  User @relation("UserFollowers", fields: [followerId], references: [id], onDelete: Cascade)
  following User @relation("UserFollowing", fields: [followingId], references: [id], onDelete: Cascade)

  @@unique([followerId, followingId])
  @@index([followingId])
}

model Like {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  userId    Int
  videoId   Int

  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  video Video @relation(fields: [videoId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([videoId])
}

model Notification {
  id        Int      @id @default(autoincrement())
  type      String
  message   String
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
  userId    Int

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id          Int      @id @default(autoincrement())
  email       String   @unique
  name        String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  avtarUrl    String?
  bio         String?
  password    String
  socialLinks Json?
  isDeleted   Boolean  @default(false)

  videos        Video[]
  comments      Comment[]
  likes         Like[]
  notifications Notification[]
  followers     Follow[] @relation("UserFollowers")
  following     Follow[] @relation("UserFollowing")
  tokens        PasswordResetToken[]
}

model Video {
  id           Int      @id @default(autoincrement())
  title        String
  description  String?
  thumbnailUrl String?
  musicUrl     String?
  filters      Json
  stickers     Json
  duration     Int
  compressed   Boolean  @default(false)
  views        Int      @default(0)
  createdAt    DateTime @default(now())
  userId       Int
  isDeleted    Boolean  @default(false)

  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  comments Comment[]
  likes    Like[]

  @@index([userId])
}

model PasswordResetToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  expiresAt DateTime
  createdAt DateTime @default(now())
}
